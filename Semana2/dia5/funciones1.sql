--FUNCIONES: BLOQUES DE PL/SQL DE CODIGO QUE REALIZAN UNA TAREA ESPECIFICA
/*
CREATE [OR REPLACE] FUNCTION nombre_funcion (
    parametro1 [IN | OUT | IN OUT] tipo_dato,
    parametro2 [IN | OUT | IN OUT] tipo_dato,
    ...
)
RETURN tipo_dato_retorno
IS
    -- Declaraciones de variables locales
BEGIN
    -- Cuerpo de la función
    -- Lógica de procesamiento
    RETURN valor_retorno;
EXCEPTION
    -- Manejo de excepciones (opcional)
END nombre_funcion;
*/

CREATE OR REPLACE FUNCTION FN_NUMERO_PAR(P_NUMERO IN NUMBER)
RETURN NVARCHAR2
IS
LV_RESULTADO NVARCHAR2(100);
BEGIN
    
    
    IF MOD(P_NUMERO,2) = 0 THEN
        LV_RESULTADO := 'EL NUMERO: '||P_NUMERO||' ES PAR';
    ELSE
        LV_RESULTADO := 'EL NUMERO: '||P_NUMERO||' NO ES PAR';
    END IF;
    
    RETURN LV_RESULTADO;
END;
/

--INVOCACION A LA FUNCION CON BLOQUE ANONIMO
BEGIN
    DBMS_OUTPUT.PUT_LINE(FN_NUMERO_PAR(10));
END;
/
--OTRA FORMA DE INVOCAR A LA FUNCION
SELECT FN_NUMERO_PAR(21) FROM DUAL;
/****************************************************/
/*
EJERCICIOS DE PRACTICA
SEGUN LA ESTRUCTURA DE UNA FUNCION PL/SQL REALIZA LOS SIGUIENTES EJERCICIOS
1.CALCULAR EL AREA DE UN CIRCULO DONDE EL PARAMETRO SEA EL RADIO
2.VERIFICAR SI UN NUMERO ES MULTIPLO DE 3
3.

*/
--1.CALCULAR EL AREA DE UN CIRCULO DONDE EL PARAMETRO SEA EL RADIO
CREATE OR REPLACE FUNCTION AREA_CIRCULO ( RADIO IN NUMBER )
RETURN NUMBER
IS
    PI NUMBER := 3.14;
    LV_RESULTADO NUMBER;
BEGIN
    LV_RESULTADO := PI * (RADIO * RADIO);
    
    RETURN LV_RESULTADO;
END AREA_CIRCULO;
/
--
DECLARE
    AREA NUMBER;
BEGIN
    AREA =: AREA_CIRCULO(8);
     DBMS_OUTPUT.PUT_LINE('EL AREA DEL CIRCULO ES: ' || AREA);
END;

SELECT AREA_CIRCULO(5) AS AREA FROM DUAL;

--2.VERIFICAR SI UN NUMERO ES MULTIPLO DE 3
CREATE OR REPLACE FUNCTION MULTIPLO_3 (NUMERO IN NUMBER)
RETURN NVARCHAR2
IS
    LV_RESULTADO NVARCHAR2(100);
BEGIN
    IF MOD(NUMERO,3) = 0 THEN
        LV_RESULTADO := 'EL NUMERO: ' || NUMERO || ' ES MULTIPLO DE 3';
    ELSE 
        LV_RESULTADO := 'EL NUMERO: ' || NUMERO || ' NO ES MULTIPLO DE 3';
    END IF;
    RETURN LV_RESULTADO;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(MULTIPLO_3(46));
END;
/

--3.CALCULAR EL AREA DEL TRIANGULO Y DEBERA RECIBIR COMO PARAMETRO BASE Y ALTURA
CREATE OR REPLACE FUNCTION AREA_TRIANGULO ( BASE IN NUMBER, ALTURA IN NUMBER )
RETURN NUMBER
IS
    LV_RESULTADO NUMBER;
BEGIN
    LV_RESULTADO := (BASE * ALTURA) / 2;
    
    RETURN LV_RESULTADO;
END AREA_TRIANGULO;
/

DECLARE
    AREA NUMBER;
BEGIN
    AREA =: AREA_TRIANGULO(3,6);
     DBMS_OUTPUT.PUT_LINE('EL AREA DEL TRIANGULO ES: ' || AREA);
END;

SELECT AREA_TRIANGULO(5,10) AS AREA FROM DUAL;

--4.REALIZAR UNA FUNCION QUE RECIBA UN NUMERO Y DEVUELVA UN DOBLE
CREATE OR REPLACE FUNCTION NUMERO_DOUBLE (NUMERO IN NUMBER)
RETURN BINARY_DOUBLE
IS
    NUMERO_D BINARY_DOUBLE;
BEGIN
    NUMERO_D := CAST(NUMERO AS BINARY_DOUBLE);--CAST()
    RETURN NUMERO_D;
END;
/
SELECT NUMERO_DOUBLE(12) AS NUMERO_D FROM DUAL;


--5.REALIZAR UNA FUNCION QUE RECIBA UN NUMERO DEL 1 AL 12 Y DEVUELVA EL NOMBRE DEL CORRESPONDIENTE

CREATE OR REPLACE FUNCTION NOMBRE_MES(NUMERO IN NUMBER) 
RETURN VARCHAR2
IS
    LV_RESULTADO NVARCHAR2(100);
BEGIN
    CASE NUMERO
        WHEN 1 THEN LV_RESULTADO := 'Enero';
        WHEN 2 THEN LV_RESULTADO := 'Febrero';
        WHEN 3 THEN LV_RESULTADO := 'Marzo';
        WHEN 4 THEN LV_RESULTADO := 'Abril';
        WHEN 5 THEN LV_RESULTADO := 'Mayo';
        WHEN 6 THEN LV_RESULTADO := 'Junio';
        WHEN 7 THEN LV_RESULTADO := 'Julio';
        WHEN 8 THEN LV_RESULTADO := 'Agosto';
        WHEN 9 THEN LV_RESULTADO := 'Septiembre';
        WHEN 10 THEN LV_RESULTADO := 'Octubre';
        WHEN 11 THEN LV_RESULTADO := 'Noviembre';
        WHEN 12 THEN LV_RESULTADO := 'Diciembre';
        ELSE LV_RESULTADO := 'SIN CLASIFICACION';
    END CASE;
    
    RETURN LV_RESULTADO;
END;
/
SELECT NOMBRE_MES(3) AS MES FROM DUAL;
--6.REALIZAR UNA FUNCION QUE RECIBA UNA EDAD Y DEVUELVA EL MENSAJE INDICANDO SI ES MAYOR  O MENOOR DE EDAD
CREATE OR REPLACE FUNCTION FN_EDAD(NUMERO IN NUMBER) 
RETURN NVARCHAR2
IS
    LV_RESULTADO NVARCHAR2(100);
BEGIN
    CASE
        WHEN NUMERO BETWEEN 1 AND 17 THEN 
        LV_RESULTADO := 'MENOR DE EDAD';
        WHEN NUMERO >= 18  THEN 
        LV_RESULTADO := 'MAYOR DE EDAD';
        ELSE LV_RESULTADO := 'SIN CLASIFICACION';
    END CASE;
    
    RETURN LV_RESULTADO;
END;
/
SELECT FN_EDAD(2) AS EDAD FROM DUAL;


--7.CALCULAR EL CUADRADO DE UN NUMERO

CREATE OR REPLACE FUNCTION FN_CUADRADO ( NUMERO IN NUMBER )
RETURN NUMBER
IS
    LV_RESULTADO NUMBER;
BEGIN
    LV_RESULTADO := NUMERO * NUMERO;
    
    RETURN LV_RESULTADO;
END;
/
--
DECLARE
    RESULTADO NUMBER;
BEGIN
    RESULTADO =: FN_CUADRADO(12);
     DBMS_OUTPUT.PUT_LINE('EL CUADRADO ES: ' || RESULTADO);
END;

SELECT FN_CUADRADO(12) AS CUADRADO FROM DUAL;


--8.UNA FUNCION QUE RECIBA COMO PARAMETRO 2 CADENAS NOMBRE Y APELLIDO, Y DEVUELVA EL NOMBRE COMPLETO

CREATE OR REPLACE FUNCTION FN_NOMBRE ( NOMBRE IN NVARCHAR2, APELLIDO IN NVARCHAR2 )
RETURN NVARCHAR2
IS
    LV_RESULTADO NVARCHAR2(100);
BEGIN
    LV_RESULTADO := 'NOMBRE COMPLETO: '|| NOMBRE ||' '||APELLIDO||'.';
    
    RETURN LV_RESULTADO;
END;
/
--
DECLARE
    NOMBRE NVARCHAR2(100);
BEGIN
    NOMBRE =: FN_NOMBRE('CRIS','CALVARIO');
     DBMS_OUTPUT.PUT_LINE(NOMBRE);
END;
/
SELECT FN_NOMBRE('CRIS','CALVARIO') AS NOMBRE FROM DUAL;









